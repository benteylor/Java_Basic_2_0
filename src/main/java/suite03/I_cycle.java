package suite03;

public class I_cycle {

    public static void main(String[] args) {
//Цикл for позволяет выполнить определенный блок кода несколько раз, повторяя его до тех пор, пока выполняется заданное условие. Это очень удобно, когда
//тебе нужно сделать что-то однотипное многократно, например:
/* - Вывести на экран числа от 1 до 10.
   - Обработать каждый элемент в списке.
   - Выполнить какое-то действие определенное количество раз. */

        // Синтаксис цикла for:
        /* for (инициализация; условие; шаг) { (открываем фигурные скобки)
        Блок кода, который будет выполняться на каждой итерации цикла
        } (закрываем фигурные скобки) */

/* Разберем каждую часть:
- инициализация: Эта часть выполняется только один раз перед самым первым запуском цикла. Здесь обычно объявляют и инициализируют переменную-счетчик
(например, int i = 0;). Эта переменная будет следить за количеством выполненных итераций.
- условие: Это булево выражение (возвращающее true или false). Цикл будет продолжаться до тех пор, пока это условие истинно (true). Как только условие
становится ложным (false), цикл завершается, и программа переходит к выполнению кода, который идет после цикла.
- шаг: Эта часть выполняется после каждой итерации цикла. Здесь обычно изменяют значение переменной-счетчика (например, i++, i--, i += 2).
Это нужно для того, чтобы условие в какой-то момент стало ложным и цикл завершился.
- тело цикла (блок кода в фигурных скобках): Это тот код, который будет выполняться на каждой итерации цикла, пока условие истинно. */

        /* for (int i = 1; i <= 10; i++) {

            System.out.println(i);

        } */

//Как и цикл for, //цикл while предназначен для многократного выполнения блока кода до тех пор, пока выполняется определенное условие. Основное отличие
//заключается в его синтаксисе и в том, как управляется условие и "шаг".
        //Синтаксис цикла while:
            /* while (условие) {
                     Блок кода, который будет выполняться, пока условие истинно
                     (обычно здесь же происходит изменение переменных, влияющих на условие) */
/* - условие: Это булево выражение (возвращающее true или false). Цикл будет выполняться до тех пор, пока это условие истинно (true). Как только условие
становится ложным (false), цикл завершается, и программа переходит к выполнению кода, который идет после цикла.
   -тело цикла (блок кода в фигурных скобках): Это тот код, который будет выполняться на каждой итерации цикла, пока условие истинно. Очень важно!
   Внутри тела цикла обычно должны происходить действия, которые в конечном итоге приведут к тому, что условие станет ложным. Если этого не сделать,
   цикл станет бесконечным. */

        /* int a = 0;

        while ( a <= 10) {

            System.out.println(" Элемент: " +a);

            a++;

        } */

// Как и while, цикл do-while выполняет блок кода многократно, пока заданное условие истинно. Ключевое отличие: в цикле do-while условие проверяется
// после выполнения блока кода. Это гарантирует, что тело цикла выполнится как минимум один раз, даже если условие с самого начала ложно.

        //Синтаксис цикла do-while:
        /* do {
        - Блок кода, который будет выполняться
        - (обычно здесь же происходит изменение переменных, влияющих на условие)
        } while (условие); // Обрати внимание на точку с запятой в конце! */

/*        int i = 100;

        do {

            System.out.println( "Элемент: " +i);

        } while (i < 10);

    }  */

//Цикл foreach создан для того, чтобы упростить обход всех элементов в коллекции или массиве. Он скрывает за кулисами детали управления индексами и позволяет
// тебе напрямую работать с каждым элементом по очереди. Это делает код более читабельным и менее подверженным ошибкам, связанным с неправильным использованием
// индексов.

        // Синтаксис цикла foreach:
        /* for (тип_элемента переменная_элемента: коллекция_или_массив) {
           - Блок кода, который будет выполняться для каждого элемента
           - переменная_элемента будет содержать текущий элемент коллекции */

        //Разберем каждую часть:
         /*- тип_элемента: Тип данных элементов, хранящихся в коллекции или массиве. Например, если у тебя список строк (List<String>), то тип элемента будет String.
             Если у тебя массив целых чисел (int[]), то тип элемента будет int.
           - переменная_элемента: Имя переменной, которая будет представлять текущий элемент коллекции или массива на каждой итерации цикла. Ты можешь выбрать любое
             допустимое имя переменной.
           - : (двоеточие): Разделяет переменную элемента и коллекцию/массив. Читается как "в".
           - коллекция_или_массив: Объект, по элементам которого ты хочешь пройтись. Это может быть экземпляр класса, реализующего интерфейс Iterable
             (например, List, Set), или просто массив.
           - тело цикла (блок кода в фигурных скобках): Код, который будет выполняться для каждого элемента коллекции или массива. Внутри этого блока переменная_
             элемента будет содержать текущий элемент.*/

        // Использование обычного цикла

     /* int[] numbers = {10, 20, 30, 40, 50};
        for (int i = 0; i < numbers.length; i++) {
            int number = numbers[i]; // Получаем элемент по индексу
            System.out.println(number);
        }*/

        //Использование цикла foreach:

        int[] numbers = {10, 20, 30, 40, 50};
        for (int number : numbers) { // Для каждого 'number' в 'numbers'
            System.out.println(number);

            // Вывод:
            /*- for: Известное число итераций, управление счетчиком.
            - while: Неизвестное число итераций, условие перед выполнением.
            - do-while: Неизвестное число итераций, условие после (минимум одно выполнение).
            - foreach: Обход коллекций/массивов, без индексов.*/

        }

        }
    }



